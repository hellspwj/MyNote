syntax = "proto3";      //PB协议版本
import                  //可以导入对应的protobuf文件，类型于C语言的#include
package                 //可以指定一个package名称，对于java解析为java中的包，对于c++则解析为名称空间

protoc ./protos/*.proto --go_out=./go/
    --go_out    支持以下参数
        plugins=plugin1+plugin2     指定插件，目前只支持grpc,即: plugins=grpc
    -I          如果import了其他proto文件，则指定搜索proto的目录，若无此选项，则在当前目录搜索

每个Protobuf消息的字段都有一定的格式
    限定修饰符 | 数据类型 | 字段名称 | = | 字段编码值 | [字段默认值]
限定修饰符包含
    required:   表示是一个必须字段，必须相对于发送方，在发送消息之前必须设置该字段的值，对于接收方，必须能够识别该字段的意思。
                发送之前没有设置required字段或者无法识别required字段都会引发编解码异常，导致消息被丢弃
    optional:   表示是一个可选字段，可选对于发送方，在发送消息时，可以有选择性的设置或者不设置该字段的值。
                对于接收方，如果能够识别可选字段就进行相应的处理，如果无法识别，则忽略该字段，消息中的其它字段正常处理。
                ---因为optional字段的特性，很多接口在升级版本中都把后来添加的字段都统一的设置为optional字段，
                这样老的版本无需升级程序也可以正常的与新的软件进行通信，只不过新的字段无法识别而已，因为并不是每个节点都需要新的功能，因此可以做到按需升级和平滑过渡。
    repeated:   表示该字段可以包含0~N个元素。其特性和optional一样，但是每一次可以包含多个值，可以看作是在传递一个数组的值。
数据类型
    bool        布尔类型（1字节）    
    double      64位浮点数(N)
    float       32位浮点数(N)
    int32       32位整数(N)
    uint32      无符号32位整数(N)
    int64       64位整数(N)
    uint64      64位无符号整数(N)
    sint32      32位整数，处理负数效率更高(N)
    sing64      64位整数，处理负数效率更高(N)
    fixed32     32位无符号整数(4字节)
    fixed64     64位无符号整数(8字节)
    sfixed32    32位整数，能以更高的效率处理负数(4字节)
    sfixed64    64位整数(8字节)
    string      只能处理ASCII字符(N)
    bytes       用于处理多字节的语言字符，如中文(N)
    enum        可以包含一个用户自定义的枚举类型uint32(N)
    message     可以包含一个用户自定义的消息类型(N)
    N表示打包的字节并不是固定，而是根据数据的大小或者长度。
    例如int32,如果数值比较小，在0~127时，使用一个字节打包
    关于枚举的打包方式和uint32相同。
    关于message,类似于C语言中的结构包含另外一个结构作为数据成员一样
    关于fixed32和int32的区别，fixed32的打包效率比int32效率高，但是使用的空间一般比int32多，因此一个属于时间效率高，一个属于空间效率高
    根据项目的实际情况，一般选择fixed32,如果遇到对传输数据量要求比较苛刻的环境，可以选择int32.
字段名称
    字段名称的命名与C,C++,Java等语言的变量命名方式几乎是相同的
    protobuf建议字段的命名采用以下划线分割的驼峰式。
字段编码值
    有了该值，通信双方才能互相识别对方的字段，当然相同的编码值，其限定修饰符和数据类型必须相同
    编码值的取值范围为1~2^32(4294967296)
    其中1~15的编码时间和空间效率都是最大的，编码值越大，其编码的时间和空间效率越低（相对于1-15），当然一般情况下相邻的2个值编码效率是相同的，除非2个值恰好在4字节，12字节，20字节等的临界区
    1900~2000编码值为Google protobuf系统内部保留值，建议不要在自己的项目中使用
    protobuf还建议把经常要传递的值把其字段编码设置为1-15之间的值
    消息中的字段的编码值无需连续，只要是合法的，并且不能在同一个消息中有字段包含相同的编码值
字段默认值
    当在传递数据时，对于required数据类型，如果用户没有设置值，则使用默认值传递到对端，当接收数据时，对于optional字段，如果没有接收到optional字段，则设置为默认值
