RTMP协议是Real Time Message Protocol(实时信息传输协议)的缩写

1. 总体介绍： 
    RTMP协议是应用层协议，是要靠底层可靠的传输层协议（通常是TCP）来保证信息传输的可靠性的。
    在基于传输层协议的链接建立完成后，RTMP协议也要客户端和服务器通过“握手”来建立基于传输层链接之上的RTMP Connection链接，在Connection链接上会传输一些控制信息，如SetChunkSize,SetACKWindowSize。
    其中CreateStream命令会创建一个Stream链接，用于传输具体的音视频数据和控制这些信息传输的命令信息。
    RTMP协议传输时会对数据做自己的格式化，这种格式的消息我们称之为RTMP Message
    而实际传输的时候为了更好地实现多路复用、分包和信息的公平性，发送端会把Message划分为带有Message ID的Chunk，每个Chunk可能是一个单独的Message，也可能是Message的一部分，在接受端会根据chunk中包含的data的长度，message id和message的长度把chunk还原成完整的Message，从而实现信息的收发。 
2. 握手 
    要建立一个有效的RTMP Connection链接，首先要“握手”:客户端要向服务器发送C0,C1,C2（按序）三个chunk，服务器向客户端发送S0,S1,S2（按序）三个chunk，然后才能进行有效的信息传输。RTMP协议本身并没有规定这6个Message的具体传输顺序，但RTMP协议的实现者需要保证这几点：

    客户端要等收到S1之后才能发送C2
    客户端要等收到S2之后才能发送其他信息（控制信息和真实音视频等数据）
    服务端要等到收到C0之后发送S1
    服务端必须等到收到C1之后才能发送S2

    服务端必须等到收到C2之后才能发送其他信息（控制信息和真实音视频等数据） 
    如果每次发送一个握手chunk的话握手顺序会是这样：

    理论上来讲只要满足以上条件，如何安排6个Message的顺序都是可以的，但实际实现中为了在保证握手的身份验证功能的基础上尽量减少通信的次数，一般的发送顺序是这样的，这一点可以通过wireshark抓ffmpeg推流包进行验证： 
    ｜client｜Server ｜ 
    ｜－－－C0+C1—->| 
    ｜<－－S0+S1+S2– | 
    ｜－－－C2-－－－> ｜

3. RTMP Chunk Stream
    Chunk Stream是对传输RTMP Chunk的流的逻辑上的抽象，客户端和服务器之间有关RTMP的信息都在这个流上通信。这个流上的操作也是我们关注RTMP协议的重点。

    3.1 Message(消息)
        这里的Message是指满足该协议格式的、可以切分成Chunk发送的消息，消息包含的字段如下：
            Timestamp（时间戳）：消息的时间戳（但不一定是当前时间，后面会介绍），4个字节
            Length(长度)：是指Message Payload（消息负载）即音视频等信息的数据的长度，3个字节
            TypeId(类型Id)：消息的类型Id，1个字节
            Message Stream ID（消息的流ID）：每个消息的唯一标识，划分成Chunk和还原Chunk为Message的时候都是根据这个ID来辨识是否是同一个消息的Chunk的，4个字节，并且以小端格式存储
    3.2 Chunking(Message分块)
        RTMP在收发数据的时候并不是以Message为单位的，而是把Message拆分成Chunk发送，而且必须在一个Chunk发送完成之后才能开始发送下一个Chunk。
        每个Chunk中带有MessageID代表属于哪个Message，接受端也会按照这个id来将chunk组装成Message。 
        为什么RTMP要将Message拆分成不同的Chunk呢？
        通过拆分，数据量较大的Message可以被拆分成较小的“Message”，这样就可以避免优先级低的消息持续发送阻塞优先级高的数据，比如在视频的传输过程中，
        会包括视频帧，音频帧和RTMP控制信息，如果持续发送音频数据或者控制数据的话可能就会造成视频帧的阻塞，然后就会造成看视频时最烦人的卡顿现象。同时对于数据量较小的Message，
        可以通过对Chunk Header的字段来压缩信息，从而减少信息的传输量。（具体的压缩方式会在后面介绍） 
        Chunk的默认大小是128字节，在传输过程中，通过一个叫做Set Chunk Size的控制信息可以设置Chunk数据量的最大值，
        在发送端和接受端会各自维护一个Chunk Size，可以分别设置这个值来改变自己这一方发送的Chunk的最大大小。大一点的Chunk减少了计算每个chunk的时间从而减少了CPU的占用率，
        但是它会占用更多的时间在发送上，尤其是在低带宽的网络情况下，很可能会阻塞后面更重要信息的传输。小一点的Chunk可以减少这种阻塞问题，但小的Chunk会引入过多额外的信息（Chunk中的Header），
        少量多次的传输也可能会造成发送的间断导致不能充分利用高带宽的优势，因此并不适合在高比特率的流中传输。在实际发送时应对要发送的数据用不同的Chunk Size去尝试，通过抓包分析等手段得出合适的Chunk大小，
        并且在传输过程中可以根据当前的带宽信息和实际信息的大小动态调整Chunk的大小，从而尽量提高CPU的利用率并减少信息的阻塞机率。 



ffmpeg框架的基本组成包含:
    AVFormat:   实现了目前多媒体领域中绝大多数媒体封装格式,包括封装与解封装,如MP4,FLV等
    AVCode:     实现了目前多媒体领域绝大多数常用的编解码格式,除了MPEG4,AAC,MJPEG等自带的格式,还支持H.264,H.265
    AVFilter:   提供了一个通用的音频,视频,字幕等滤镜处理框架,可以有多个输入和多个输出
    swscale:    提供了高级别的图像转换API
    swresample: 提供了高级别的音频重采样API

函数
    /*  
    *   用于打开一个输入的封装器.在调用该函数之前，须确保av_register_all()和avformat_network_init()已调用,目前已不再需要
    *   @param  ps          格式化的上下文。要注意，如果传入的是一个AVFormatContext*的指针，则该空间须自己手动清理，若传入的指针为空，则FFmpeg会内部自己创建。
    *   @param  url         传入的地址。支持http,RTSP,以及普通的本地文件。地址最终会存入到AVFormatContext结构体当中
    *   @param  fmt         指定输入的封装格式。一般传NULL，由FFmpeg自行探测。
    *   @param  options     其它参数设置。它是一个字典，用于参数传递，不传则写NULL。参见：libavformat/options_table.h,其中包含了它支持的参数设置
    *   libavformat/avformat.h
    */
    int avformat_open_input(AVFormatContext **ps, const char *url, ff_const59 AVInputFormat *fmt, AVDictionary **options)       

    /*
    *   可以获取一部分音视频数据并且获得一部分相关的信息
    *   @param  ic          输入的AVFormatContext
    *   @param  options     额外的参数
    *   libavformat/avformat.h
    */
    int avformat_find_stream_info(AVFormatContext *ic, AVDictionary **options)

    /*
    *   获取解码器 
    *   @param id           通过解封装之后，从avstream里面获取CodecID ，通过CodecID来查找decoder      
    *   libavcodec/avcodec.h
    */
    AVCodec *avcodec_find_decoder(enum AVCodecID id)

    /*
    *   申请AVCodecContext空间
    *   @param codec        传递的编解码器,也可以不传
    *   libavcodec/avcodec.h
    */
    AVCodecContext *avcode_alloc_context3(const AVCodec *codec)

    /*
    *   该函数用于将流里面的参数，也就是AVStream里面的参数直接复制到AVCodecContext的上下文当中
    *   @param  codec   上下文
    *   @param  par     流里面的某个参数
    *   libavcodec/avcodec.h
    */
    int avcodec_parameters_to_context(AVCodecContext *codec, const AVCodecParameters *par)

    /*
    *   推断帧率
    *   libavformat/avformat.h
    */
    AVRational av_guess_frame_rate(AVFormatContext *ctx, AVStream *stream, AVFrame *frame)

    /*
    *   打开解码器
    *   @param  avctx   
    *   libavcodec/avcodec.h
    */
    int avcodec_open2(AVCodecContext *avctx, const AVCodec *codec, AVDictionary **options)

    /*
    *   申请avstream
    *   libavformat/avformat.h
    */
    AVStream *avformat_new_stream(AVFormatContext *s, const AVCodec *c)

