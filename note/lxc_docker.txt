lxc(linux containers)

lxc-version 			用于显示系统LXC的版本号（可以通过此命令判断系统是否安装了lxc）
lxc-checkconfig 		用于判断linux内核是否支持LXC
lxc-create				用于创建一个容器
用法：lxc-create -n name [-f config_file]
			-n 	后面跟要创建的容器名字 例如：-n foo
			-f 	后面跟容器配置文件的路径
注：1.采用lxc-create创建的容器，在停止运行后，不会被销毁，要采用lxc-destroy命令才能销毁
    2.容器命令空间是全局的，系统中不允许存在重名的容器，如果-n 后面跟一个已经存在的容器名，创建会失败
	
lxc-execute 			用于在一个容器执行应用程序
用法： lxc-execute -n name [-f config_file] [ -s KEY=VAL ]command
           -n 后面跟容器名字（容器名字用于管理容器）例如：-n foo
           -f 后面跟容器配置文件的路径（如果没有配置文件，可以直接用-s指定配置选项，如果什么都没有，系统采用默认策略）例如：-f foo.conf
           -s 后面跟配置键值对 例如：lxc.cgroup.cpu.shares=512
		   command 为要执行的命令 例如：/bin/bash
注：1.如果容器还不存在，lxc-execute会自动创建一个,容器停止运行后会被自动销毁
    2.用lxc-execute启动应用程序，配置优先级如下：
        如果指定-f选项，那么之前创建容器（如果容器是已存在的）的配置文件不会被使用
        如果没有指定-f选项，那么将采用之前创建容器（如果容器已存在）的配置文件
        如果指定-s选项，则在命令行中的配置键值对会覆盖配置文件（无论之前的还是-f指定的）相同配置
		
lxc-start 				用于在容器中执行给定命令
用法：lxc-start  -n name [-f config_file] [-c console_file] [-d] [-s KEY=VAL] [command]
	-d 将容器当做守护进程执行
    -f 后面跟配置文件
    -c 指定一个文件作为容器console的输出，如果不指定，将输出到终端
    -s 指定配置
注：1.如果容器还不存在，lxc-start会自动创建一个,容器停止运行后会被自动销毁
    2.lxc-start配置优先级与lxc-execute相同
    3.lxc-start 与lxc.execute的异同：
      lxc-start 和 lxc-execute都可以在容器中启动进程，区别在于lxc-start直接创建进程，lxc-execute先创建lxc-init进程，然后在lxc-init中fork一个进程来执行。
    4.lxc-start用于在容器启动system，lxc-execute用于在容器执行应用程序
	
lxc-kill 				发送信号给容器中的第一个用户进程（容器内部进程号为2的进程）
用法：lxc-kil -n name SIGNUM
      -n 后面跟容器名
      SIGNUM  信号 （此参数可选，默认SIGKILL）
	  
lxc-stop 用于停止容器中所有的进程
用法：lxc-stop -n name
       -n后面跟要停止的容器名

lxc-destroy 用于销毁容器
用法：lxc-destroy -n name
       -n后面跟要停止的容器名
	   
lxc-cgroup 用于获取或调整与cgroup相关的参数
用法：lxc-cgroup -n name subsystem value
        -n 后面跟要调整的容器名
		
lxc-info 用户获取一个容器的状态
用法:lxc-info -n name
       -n后面跟操作的容器名
	   
lxc-monitor 监控一个容器状态的变换，当一个容器的状态变化时，此命令会在屏幕上打印出容器的状态
用法:lxc-monitor -n name

lxc-ls 列出当前系统所有的容器

lxc-ps 列出特定容器中运行的进程

容器生命周期管理
docker run	镜像名  进程(如:/bin/bash 启动docker容器执行/bin/bash这个进程)
	它首先检测有没有对应的镜像名，如果没有就自动pull，如果有就利用这个镜像来启动一个容器
	-i：进入镜像；
	-t：启动一个tty终端；
	--name name1：指定容器名称为name1；
	--h hostname1：指定容器主机名为hostname1;
	-P:	表示让容器随机对应一个宿主机的端口
	-p:	hostPort:containerPort
	-p: ip:hostPort:containerPort
	-p: ip::containerPort
	-v:	containerDir 			将容器目录挂载到宿主机的随机目录
	-v:	hostDir:containerDir	指定宿主目录挂载到容器固定目录,违背了docker一处部署,到处运行的原则
docker start/stop/restart		启动/停止/重启容器,后接容器id
kill
rm
pause/unpause
create
docker exec		在运行的容器中执行命令

容器操作
docker ps	显示正在后台运行的容器
	-a		显示所有容器
	-q		只返回容器id
inspect
top
attach
events
logs
wait
export
port

容器rootfs命令
docker commit	supermap/iserverdss:v1	创建一个新的image,后接容器id,仓库名/镜像名:TAG名。
	-a, --author=""     Author (e.g., "John Hannibal Smith <hannibal@a-team.com>")
	-m, --message=""    Commit message
	-p, --pause=true    Pause container during commit

镜像仓库
login
pull
push
search

本地镜像管理
images
docker 	rmi					删除镜像,后接镜像id
tag
build
history
docker save					在其他已有镜像机器上执行此命令将此容器保存成tar文件镜像,例:docker save ubuntu:14.04 > ubuntu.14.04.tar
docker load					加载镜像,例:docker load < ubuntu_14.04.tar
import
info|version
info
version