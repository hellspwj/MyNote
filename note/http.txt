http    (Hypertext Transfer Protocol)               超文本传输协议,应用层协议,传输层使用TCP
MIME    (Multipurpose Internet Mail Extension)      多用途因特网邮件扩展,现用来表示媒体类型
URI     (Uniform Resource Identifier)               统一资源标识符
    分为2种类型
    URL ()      统一资源定位符,描述了一台特定服务器上某资源的特定位置
        <scheme>://<user>:<password>@<host>:<port>/<path>;<params>?<query>#<frag>
            scheme:     方案,访问服务器以获取资源时要使用哪种协议,方案名与大小写无关
            user:       用户,某些方案访问资源时需要的用户名
            password:   密码,用户名后面可能要包含的密码,中间由冒号分隔
            host:       主机,资源宿主服务器的主机名或点分IP地址
            port:       商品,资源宿主服务器正在监听的端口号,很多方案都有默认端口号(HTTP的默认端口号为80)
            path:       路径,服务器上资源的本地名,由一个斜杠将其与前面的URL组件分隔开来,路径组件的语法是与服务器和方案有关的,每个路径段都可以有自己的params
            params:     参数,某些方案会用这个组件来指定输入参数,参数为名/值对,URL中可以包含多个参数字段,它们互相之间以及与路径的其余部分之间用分号分隔
            query:      查询,某些方案会用这个组件传递参数以激活应用程序(比如数据库,公告板,搜索引擎以及其他因特网网关).查询组件的内容没有通用格式,用字符"?"将其与URL的其余部分分隔开来
            frag:       片段,一小片或一部分资源的名字.引用对象时,不会将frag字段传给服务器,这个字段是在客户端内部使用的.通过字符"#"将其与URL的其余部分分隔开来,例如可以用frag来定位到一个html页面中一个特定的图片或小节
    URN ()      统一资源名,作为特定内容的唯一名称使用,与目前的资源所在地无关,如 urn:ietf:rfc:2141
HTTP方法
    GET     从服务器向客户端发送命名资源
    PUT     将来自客户端的数据存储到一个命名的服务器资源中去
    DELETE  从服务器中删除命名资源
    POST    将客户端数据发送到一个服务器网关应用程序
    HEAD    仅发送命名资源响应中的HTTP首部
HTTP状态码
    200     OK,文档正确返回
    302     Redirect(重定向),到其他地方去获取资源
    404     Not Found(没找到),无法找到这个资源
    状态码分类
        整体范围        已定义范围      分类
        100~199        100~101      信息提示
        200~299        200~206       成功
        300~399        300~305       重定向
        400~499        400~415      客户端错误
        500~599        500~505      服务器错误
HTTP报文
    起始行      报文的第一行就是超始行,在请求报文中用来说明要做些什么,在响应报文中说明出现了什么情况
    首部字段    起始行后面有零个或多个首部字段,每个首部字段都包含一个名字和一个值,为了便于解析,两者之间用冒号来分隔,首部以一个空行来结束
    主体        空行之后就是可选的报文主体了,其中包含了所有类型的数据
HTTP协议版本
    0.9         1991原型版本称为HTTP/0.9,有很多严重的设计缺陷,只应该用于与老客户端的交互,只支持GET方法,不支持多媒体内容的MIME类型,各种HTTP首部,或者版本号
    1.0         第一个得到广泛使用的版本,添加了版本号,各种HTTP首部,一些额外的方法,以及对多媒体对象的处理
    1.0+        包含各种特性,包括持久的keep-alive连接,虚拟主机支持,以及代理连接支持,这种非正式的HTTP扩展版本通常称为HTTP/1.0+
    1.1         重点关注的是校正HTTP设计中的结构性缺陷,明确语义,引入重要的性能优化措施,并删除一些不好的特性
    NG(2.0)     是HTTP/1.1后继结构的原型建议,它重点关注的是性能的大幅优化,以及更强大的服务逻辑远程执行框架