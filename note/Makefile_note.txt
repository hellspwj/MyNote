可以在make的时候加上make CFLAGS="-g -O0"

make可以指定工作目标，如果未指定任何工作目标，make就会采用Makefile文件中的第一个工作目标，称为默认目标

make最多允许4个编译命令同时执行,可以使用make -j4来并行编译

makefile文件中支持三种通配符,也支持目录~
	"*"			0或多个任意字符
	"?"			代表任何单一字符
	"[...]"		代表一个字符集，如[a-z]

.PHONY : clean  表示,clean是个伪目标文件,它用来指定一个假想的工作目标,也就是说它后面的并不是一个实际文件,而且肯定要视为未更新(也就是说条件总是满足,需要处理)
	作用:	
	1.避免和同名文件冲突,若执行make的目录中出现了目标文件,则目标文件始终是最新的,命令永远不会执行,为避免这个问题,可使用.PHONY
	2.phony目标可以有依赖关系,当一个目录中有多个程序,将其放在一个makefile中会更方便,因为缺省上档是makefile中的第一个目标,能常将这个phony目标叫做"all",其依赖文件为各个程序
	all : prog1 prog2 prog3
	.PHONY : all
	...

一般规则
	target1 target2 target3...:prerequisite1 prerequisite2...
		command1
		command2
		...

	也可以
	target...:prerequisites;command;command
	
	target也就是一个目标文件,可以是Object File,也可以是执行文件,还可以是一个标签(Label),target可以是多个，被称为工作目标
	prerequisites就是要生成那个target所需要的文件或是目录，被称为必要条件
	command也就是make需要执行的命令(任意的Shell命令),如果不在一行一定要以TAB开头,在command前加一个"-"号,表示这条命令如果出现问题,不要管,继续做后面的事,如果在一行则用分号作分隔符,make的命令默认是被/bin/sh执行的，被称为所要执行的命令
	makefile里的command每一行是一个进程,不同行之间变量值不能传递
	这是一个文件的依赖关系,也就是说,target这一个或多个目标文件依赖于prerequisites中的文件,其生成规则定义在command中,prerequisites中如果有一个以上的文件比target文件要新或者target不存在的话,command所定义的命令就会被执行
	可以不必将规则一条规则一次性定义完全，每当make看到一个工作目标，就会将该工作目标与其必要条件加入依存图，如果make所看到的工作目标已经存在于依存图中，则任何额外的必要条件都会被附加到该工作目标在依存图的项目里
	当程序库作为必要条件时,可以使用标准语法即完整文件名或者-lmath来引用(math是库名),但-l语法里的程序库名称不能为makefile里的工作目标

模式规则	所有内置规则都是模式规则
	模式规则中的百分比符号大体上代表任意多个字符，可以放在模式中的任何地方，不过只能出现一次
	一个模式可以包含一个前缀或一个后缀，或是这2者同时存在
	模式规则工作目标必须以前缀开头并且以后缀结尾（如果它们存在的话），如果找到相符的模式规则工作目标，则前缀与后缀之间的字符会被作为文件名的词干，接着make会将词干替换到必要条件模式中来检查该模式规则的必要条件
	自动推导
		只要make看到一个.o文件,它就会自动的把.c文件加在依赖关系中,如果make找到一个whatever.o,那么whatever.c,就会是whatever.o的依赖文件.并且cc -c whatever.c也会被推导出来

静态模式规则	可以更加容易地定义多目标的规则,规则存在多个目标,并且不同的目标可以根据目标文件的名字来自动构造出依赖文件，只能应用在特定的工作目标上
	<targets...>:<target-pattern>:<prereq-patterns...>
		<commands>
		...
	targets定义了一系列的目标文件,可以有通配符,是目标的一个集合,通配符用%
	target-pattern是指明了targets的模式,也就是目标集模式
	prereq-patterns是目标的依赖模式,它对target-pattern形成的模式再进行一次依赖目标的定义
	例子:
		$(OBJECTS): %.o: %.c
		此规则与一般模式规则的区别就是开头的$(OBJECTS),这将使得这项规则只能用在$(OBJECTS)变量中所列举的文件上
		%.o模式会匹配$(OBJECTS)中所列举的每个目标文件并且取出其词干,然后该词干会被替换进%.c模式,以产生工作目标的必要条件

后缀规则	过时的方法
	后缀规则的工作目标,可以是一个扩展名或两个被衔接在一起的扩展名
	.c.o:
		$(COMPILE.c) $(OUTPUT_OPTION)	$<
	和下面的规则一样
	%.o: %.c
		$(COMPILE.c) $(OUTPUT_OPTION)	$<
	make只会在后缀名在已知扩展列表中时,才将之视为后缀规则
	.SUFFIXES: .out .a	#设定已知扩展名
	.SUFFIXES: 			#删除所有已知扩展名

双冒号规则: 	
	是一个模型的功能,会根据必要条件的时间戳是否在工作目标之后,以不同的命令来更新同一个工作目标
	通常,当一个工作目标多次出现时,所有的必要条件会被衔接成一份列表,而且只让一个命令脚本进行更新的动作
	然而,对双冒号规则而言,相同的工作目标每出现一次就会被视为一个独立的实体,必须进行独立的处理
	这意味着,对同一个工作目标来说,所有的规则必须是同一个类型,也就是说,它们若非全都是双冒号规则,就应该是单冒号规则


自动化变量
	$@ 		#表示规则中的目标文件集。在模式规则中，如果有多个目标，那么，"$@"就是匹配于目标中模式定义的集合
	$%		#仅当目标是静态库文件时，表示规则中的目标成员名。例如，如果一个目标是"foo.a(bar.o)"，那么，"$%"就是"bar.o"，"$@"就是"foo.a"。如果目标不是静态库文件（Unix下是[.a]，Windows下是[.lib]），那么，其值为空。
	$<		#依赖目标中的第一个目标名字。如果依赖目标是以模式（即"%"）定义的，那么"$<"将是符合模式的一系列的文件集。注意，其是一个一个取出来的。
	$?		#所有比目标新的依赖目标的集合。以空格分隔
	$^		#所有的依赖目标的集合。以空格分隔。如果在依赖目标中有多个重复的，那个这个变量会去除重复的依赖目标，只保留一份
	$+		#这个变量很像"$^"，也是所有依赖目标的集合。只是它不去除重复的依赖目标(是为了解决循环依赖而创建的,不然$^去掉重复的库的话就不能解决依赖问题了)
	$*		#这个变量表示目标模式中"%"及其之前的部分。如果目标是"dir/a.foo.b"，并且目标的模式是"a.%.b"，那么，"$*"的值就是"dir /a.foo"

	在上述所列出来的自动量变量中。四个变量（$@、$<、$%、$*）在扩展时只会有一个文件，而另三个的值是一个文件列表。
	这七个自动化变量还可以取得文件的目录名或是在当前目录下的符合模式的文件名，只需要搭配上"D"或"F"字样。如$(@D)
	这是GNU make中老版本的特性，在新版本中，我们使用函数"dir"或"notdir"就可以做到了。"D"的含义就是Directory，就是目录，"F"的含义就是File，就是文件。

变量
	变量名称区分大小写
	在Makefile中声明了一个变量,在后续就可以用"$(objects)"或者"${objects}的方式来使用这个变量，也可以是$a,必须是单字符变量
	一个变量的值由赋值符号右边已删除前导空格所所有字组成.跟在所有字之后的空格则不会被删除
	变量有2种类型
	简单扩展的变量
		例 MAKE_DEPEND := $(CC) -M,一旦make从Makefile读进该变量的定义语句,就会立即展开,如果此时CC尚未定义,则会变成 <space>-M
	递归扩展的变量
		例 MAKE_DEPEND  = $(CC) -M,make只会读进赋值运算符右边的部分,并将之存储为该变量的值,但不会进行扩展的动作,扩展的动作会被延迟到该变量被使用的时候才进行,可能会导致变量的值变得混乱
	MAKELEVEL变量,如果make有一个嵌套执行的动作,那么,这个变量记录了当前Makefile的调用层数
	?=操作符,foo?=bar,含义是如果foo没有被定义过,那么foo=bar,如果foo定义过了,则这条语句什么也不做
	+=可以给变量追加值,如果变量之前没定义过,那么"+="会自动变成"=",如果前面变量有定义,那么"+="会继承于前次操作的赋值符,如果前一次是":=",那么"+="会以":="作为其赋值符,如果是=,由于前次的赋值符是"=”，所以"+=”也会以"=”来做为赋值，那么岂不会发生变量的递补归定义，这是很不好的，所以make会自动为我们解决这个问题，我们不必担心这个问题

工作目标与模式的专属变量
	target...: varible = value
	target...: varible := value
	target...: varible += value
	target...: varible ?= value
	例:
		gui.o: CPPFLAGS += -DUSE_NEW_MALLOC=1
		gui.o: gui.h
		只在编译gui.o时加上编译选项-DUSE_NEW_MALLOC=1
	这类变量的赋值动作会延后到开始处理工作目标的时候进行,所以赋值运算右边部分的值,可由另一个工作目标的专属变量来设定,同样地,此变量只在必要条件的处理期间,才会发生作用

立即和延后扩展的规则
	定义		何时扩展a	何时扩展b
	a=b 		立即		延后
	a?=b 		立即		延后
	a:=b 		立即 		立即
	a+=b 		立即 		延后或立即
	define a	立即  		延后
	b...
	b...
	endef

定义命令包
	如果makefile中出现一些相同命令序列,那么可以为这些相同的命令序列定义一个变量,以define开始,以endef结束,命令包里命令必须以TAB开头,否则就是普通的行了,如
	define run-yacc
		yacc $(firstword $^)
		mv y.tab.c $@
	endef
	run-yacc是这个命令包的名字,在其他地方使用时使用 $(run-yacc) 即可
	可以给宏传递参数,在内部用$1,$2引用,如果没有给awk脚本加上引号,则需要使用$$1,$$2来引用,因为$1会被make视为自己的变量

在命令前加@表示make时不会将这个命令显示出来
	例如
	@echo 正在编译xxx模块
	不加@时
	echo 正在编译xxx模块
	正在编译xxx模块
	加@时
	正在编译xxx模块

include		可以把别的Makefile包含进来,被包含的文件会原模原样的放在当前文件的包含位置
	语法: include filename        #filename可以是当前操作系统shell的文件模式(可以包含路径和通配符)
	include前面可以有一些空字符,但是绝不能是TAB键开始
	make命令开始时,会先找寻include包含的其他makefile,并替换到当前位置,会在当前目录下首先寻找,如果没有找到,还会在下面的几个目录下找
	1. 如果make执行时,有"-I'或"--include-dir"参数,那么make就会在这个参数所指定的目录下寻找
	2. 如果目录/include(一般是:/usr/local或/usr/include)存在的话,make也会去找
	如果文件没有找到的话,make会生成一条警告信息,但不会马上出现致命错误,它会继续载入其他的文件,一旦完成makefile的读取,make会再重试这些没有找到的文件,或是不能读取的文件,如果还是不行,make才会出现一条致命信息,如果下面有规则可以创建include的文件,会先调用规则创建文件,再include
	如果make没有找到引入文件,而且没有找到可用来创建该引入文件的规则,make将会汇报错误信息并结束执行.如果想让make忽略无法加载的引入文件,可以为include前加上一个破折号
	即 -include

环境变量MAKEFILES
如果当前环境中定义了环境变量MAKEFILES,那么,make会把这个变量中的值做一个类似于include的动作,这个变量的值是其它的makefile,用空格分隔,只是,它和include不同的是,从这个环境变量中引入的makefile的"目标"不会起作用,如果环境变量中定义的文件发现错误,make也不理,不建议使用

GNU的make的工作的执行步骤:
	1. 依次读取变量“MAKEFILES”定义的makefile文件列表
	2. 读取工作目录下的makefile文件（缺省的是根据命名的查找顺序“GNUmakefile”，“makefile”，“Makefile”，首先找到那个就读取那个）
	3. 依次读取工作目录makefile文件中使用指示符“include”包含的文件
	4. 查找重建所有已读取的makefile文件的规则（如果存在一个目标是当前读取的某一个makefile文件，则执行此规则重建此makefile文件，完成以后从第一步开始重新执行）
	5. 初始化变量值并展开那些需要立即展开的变量和函数并根据预设条件确定执行分支
	6. 根据“终极目标”以及其他目标的依赖关系建立依赖关系链表
	7. 执行除“终极目标”以外的所有的目标的规则（规则中如果依赖文件中任一个文件的时间戳比目标文件新，则使用规则所定义的命令重建目标文件）
	8. 执行“终极目标”所在的规则
	如果在第1条规则中,定义的变量被使用了,那么,make会把其展开在使用的位置,但make并没有完全马上展开,而是使用的拖延战术,如果变量出现在依赖的规则中,那么仅当这条依赖被决定要使用了,变量才会在其内部展开

文件搜寻
	Makefile文件中的特殊变量"VPATH",如果没有指定这个变量,make只会在当前的目录中寻找依赖文件和目标文件,如果定义了这个变量,那么,make就会在当前目录找不到的情况下,就会到变量"VPATH"中指定的目录下寻找文件了,这个变量中路径以":"分隔,当前目录永远是最高优先搜索的地方
	另一个设置搜索路径的方法是使用make的"vpath"关键字(全小写),这不是变量,这是make的一个关键字,它和变量"VPATH"很类似,但是更灵活,它可以指定不同的文件在不同的搜索目录中,使用方法有三种
	1.  vpath <pattern> <directories>   为符合模式<pattern>的文件指定搜索目录<directories>	例:vpath %.c src vpath %.h include
	2.	vpath <pattern>					清除符合模式<pattern>的文件的搜索目录
	3.	vpath							清除所有已被设置好了的文件搜索目录
	vpath使用方法中的<pattern>需要包含"%"字符,"%"的意思是匹配零或若干字符

如果要让上一条命令的结果应用在下一条命令里头,应该使用分号分隔这两条命令,例
exec:
	cd /home/hchen
	pwd
exec:
	cd /home/hchen;pwd
第二条才是正确的

总控makefile
	如果我们有一个子目录叫subdir,这个目录下有个Makefile文件,那总控makefile可以这样写
	subsystem:
		cd subdir && $(MAKE)
	其等价于:
	subsystem:
		$(MAKE) -C subdir
	总控Makefile的变量可以传递到下级的Makefile中(如果显示的声明),但是不会覆盖下层所定义的变量,除非指定了-e参数,有两个变量,一个是SHELL,一个是MAKEFLAGS,这2个变量不管是否export,总是会传递到下层makefile中
	如果要传递变量到下级makefile,那么可以这样声明
	export<variable...>
	如果不想让某些变量传递到下级makefile,
	unexport<variable...>
	如果要传递所有变量,那么
	export

$(var:a=b)或是${var:a=b},意思是,把变量var中所有以a字串结尾的a替换成b,这里的结尾是空格或者是结束符
$(foo:%.o=%.c)	静态模式替换

x=y
y=z
a:=$($(x))  #把变量的值再当成变量值

如果有变量是通过make的命令行参数设置的,那么Makefile中对这个变量的赋值会被忽略,如果想在Makefile中设置这类参数的值,那么可以使用"override"指示符,语法:
override <variable> = <value>
override <variable>:= <value>
override <variable>+=<more text>
对于多行的变量定义,使用define指示符,在define指示符前,也可以使用override指示符
override define foo
bar
enddef

目标变量
<target...>:<variable-assignment>				#variable-assignment可以是前面提到过的各种赋值表达式,如"=",":=","?=","+="
<target...>: overide<variable-assignment>

模式变量
例 %.o : CFLAGS= -O

条件表达式语法
	<conditional-directive>
	<text-if-true>
	endif
	以及
	<conditional-directive>
	<text-if-true>
	else
	<text-if-false>
	endif
	其中,<conditional-directive>表示条件关键字,有4个
	ifeq(<arg1>,<arg2>)
	ifeq '<arg1>' '<arg2>'
	ifeq "<arg1>" "<arg2>"
	ifeq "<arg1>" '<arg2>'
	ifeq '<arg1>' "<arg2>"

	ifneq...
	ifdef...
	ifndef...
	make是在读取Makefile时就计算表达式的值,并根据条件表达式的值来选择语句,所以,最好不要把自动化变量(如"$@"等)放入条件表达式中,因为自动化变量是在运行时才有的

函数调用
	语法: $(<function> <arguments>)或是${<function> <arguments>}
	参数间以逗号分隔,函数名与参数间以空格分隔

字符串处理函数
	$(subst <from>,<to>,<text>)		#字符串替换函数,把字符串<text>中的<from>替换成<to>,返回被替换过后的字符串
	$(patsubst <pattern>,<replacement>,<text>)	#模式字符串替换函数,查找<text>中的单词是否符合<pattern>,如果匹配的话,则以<replacement>替换,返回被替换过后的字符串
	$(strip <string>)				#去空格函数,去掉<string>字串中开头和结尾的空字符,返回被去掉空格的字符串
	$(findstring <find>,<in>)		#查找字符串函数,在字符串<in>中查找<find>,如果找到,返回<find>,否则返回空字符串
	$(filter <pattern>,<text>)		#以<pattern>模式过滤<text>中的单词,保留符合模式<pattern>的单词,返回符合模式的字串
	$(filter-out <pattern>,<text>)	#反过滤函数,和上个函数相反
	$(sort <list>)					#排序函数,给字符串list中的单词排序(升充)并移除重复的目标,返回排序后的字符串
	$(word <n>,<text>)				#取单词函数,取<text>中的第<n>个单词,返回第<n>个单词,若n比单词个数大,则返回空
	$(wordlist <s>,<e>,<text>)		#取单词串函数,从字符串<text>中取从<s>开始到<e>的单词串,<s>和<e>是一个数字,返回字符串<text>中从<s>到<e>的单词字串,如果<s>比<text>中的单词数要大，那么返回空字符串,如果<e>大于<text>的单词数，那么返回从<s>开始，到<text>结束的单词串
	$(words <text>)					#单词个数统计函数,返回<text>中的单词数
	$(firstword <text> )			#首单词函数,取字符串<text>中的第一个单词,返回字符串<text>的第一个单词

文件名操作函数
	$(dir <names...> )				#取目录函数,从文件名序列<names>中取出目录部分,目录部分是指最后一个反斜杠（"/”）之前的部分,如果没有反斜杠，那么返回"./”
	$(notdir <names...> )			#取文件函数,从文件名序列<names>中取出非目录部分,非目录部分是指最后一个反斜杠（"/”）之后的部分,返回文件名序列<names>的非目录部分
	$(suffix <names...> )			#取后缀函数,从文件名序列<names>中取出各个文件名的后缀,返回文件名序列<names>的后缀序列，如果文件没有后缀，则返回空字串
	$(basename <names...> )			#取前缀函数,从文件名序列<names>中取出各个文件名的前缀部分,返回文件名序列<names>的前缀序列，如果文件没有前缀，则返回空字串
	$(addsuffix <suffix>,<names...> )	#加后缀函数,把后缀<suffix>加到<names>中的每个单词后面,返回加过后缀的文件名序列
	$(addprefix <prefix>,<names...> )	#加前缀函数,把前缀<prefix>加到<names>中的每个单词前面,返回加过前缀的文件名序列
	$(join <list1>,<list2> )		#连接函数,把<list2>中的单词对应地加到<list1>的单词后面,如果<list1>的单词个数要比<list2>的多,那么,<list1>中的多出来的单词将保持原样。如果<list2>的单词个数要比<list1>多,那么,<list2>多出来的单词将被复制到<list1>中
	$(wildcard PATTERN...)			#它被展开为已经存在的、使用空格分开的、匹配此模式的所有文件列表

foreach 函数
	$(foreach <var>,<list>,<text> )		#把参数<list>中的单词逐一取出放到参数<var>所指定的变量中,然后再执行<text>所包含的表达式,每一次<text>会返回一个字符串,循环过程中，<text>的所返回的每个字符串会以空格分隔,最后当整个循环结束时,<text>所返回的每个字符串所组成的整个字符串（以空格分隔）将会是foreach函数的返回值

if函数
	$(if <condition>,<then-part> ) 或 $(if <condition>,<then-part>,<else-part> )
	#<condition>参数是if的表达式,如果其返回的为非空字符串,那么这个表达式就相当于返回真,于是,<then-part>会被计算,否则<else-part> 会被计算,如果<condition>为真（非空字符串）,那个<then- part>会是整个函数的返回值,如果<condition>为假（空字符串）,那么<else-part>会是整个函数的返回值,此时如果<else-part>没有被定义,那么,整个函数返回空字串

call函数
	call函数是唯一一个可以用来创建新的参数化的函数。你可以写一个非常复杂的表达式，这个表达式中，你可以定义许多参数，然后你可以用call函数来向这个表达式传递参数。其语法是：
	$(call <expression>,<parm1>,<parm2>,<parm3>...)
	#当 make执行这个函数时，<expression>参数中的变量，如$(1)，$(2)，$(3)等，会被参数<parm1>，<parm2>，<parm3>依次取代。而<expression>的返回值就是 call函数的返回值

origin函数
	$(origin <variable> )		#注意，<variable>是变量的名字，不应该是引用,返回值有undefined,default,environment,file,command line,override,automatic

shell函数
	shell 函数也不像其它的函数。顾名思义，它的参数应该就是操作系统Shell的命令。它和反引号"`”是相同的功能。这就是说，shell函数把执行操作系统命令后的输出作为函数
	返回。于是，我们可以用操作系统命令以及字符串处理命令awk，sed等等命令来生成一个变量，如：
	contents := $(shell cat foo)
	这个函数会新生成一个Shell程序来执行命令,所以要注意其运行性能，如果Makefile中有一些比较复杂的规则，并大量使用了这个函数，那么对于系统性能是有害的

控制make运行的函数
	$(error <text ...> )		#产生一个致命的错误，<text...>是错误信息。注意，error函数不会在一被使用就会产生错误信息，所以如果你把其定义在某个变量中，并在后续的脚本中使用这个变量，那么也是可以的
	$(warning <text ...> )		#这个函数很像error函数，只是它并不会让make退出，只是输出一段警告信息，而make继续执行

eval函数
	用途是将文本直接放入make解析器
	例: $(eval sources := foo.c bar.c) 
	首先make会扫描eval中的参数中是否有变量以便进行扩展的动作,然后make会解析文本以及进行求值的动作,就好像它是来自输入的文件一样

make的退出码
0 —— 表示成功执行。
1 —— 如果make运行时出现任何错误，其返回1。
2 —— 如果你使用了make的"-q”选项，并且make使得一些目标不需要更新，那么返回2。

make中有个环境变量叫MAKECMDGOALS,这个变量中会存放你所指定的终极目标的列表,如果在命令行上，你没有指定目标，那么，这个变量是空值

make的参数
	检查规则
	"-n"
	"--just-print"
	"--dry-run"
	"--recon"
	不执行参数，这些参数只是打印命令，不管目标是否更新，把规则和连带规则下的命令打印出来，但不执行

	“-t”
	“--touch”
	这个参数的意思就是把目标文件的时间更新，但不更改目标文件。也就是说，make假装编译目标，但不是真正的编译目标，只是把目标变成已编译过的状态

	“-q”
	“--question”
	这个参数的行为是找目标的意思，也就是说，如果目标存在，那么其什么也不会输出，当然也不会执行编译，如果目标不存在，其会打印出一条出错信息。

	“-W <file>”
	“--what-if=<file>”
	“--assume-new=<file>”
	“--new-file=<file>”
	这个参数需要指定一个文件。一般是是源文件（或依赖文件），Make会根据规则推导来运行依赖于这个文件的命令，一般来说，可以和“-n”参数一同使用，来查看这个依赖文件
	所发生的规则命令

	下面列举了所有GNU make 3.80版的参数定义。其它版本和产商的make大同小异，不过其它产商的make的具体参数还是请参考各自的产品文档。

	“-b”
	“-m”
	这两个参数的作用是忽略和其它版本make的兼容性。

	“-B”
	“--always-make”
	认为所有的目标都需要更新（重编译）。

	“-C <dir>”
	“--directory=<dir>”
	指定读取makefile的目录。如果有多个“-C”参数，make的解释是后面的路径以前面的作为相对路径，并以最后的目录作为被指定目录。如：“make –C ~hchen/test –C prog”
	等价于“make –C ~hchen/test/prog”。

	“—debug[=<options>]”
	输出make的调试信息。它有几种不同的级别可供选择，如果没有参数，那就是输出最简单的调试信息。下面是<options>的取值：
	a —— 也就是all，输出所有的调试信息。（会非常的多）
	b —— 也就是basic，只输出简单的调试信息。即输出不需要重编译的目标。
	v —— 也就是verbose，在b选项的级别之上。输出的信息包括哪个makefile被解析，不需要被重编译的依赖文件（或是依赖目标）等。
	i —— 也就是implicit，输出所以的隐含规则。
	j —— 也就是jobs，输出执行规则中命令的详细信息，如命令的PID、返回码等。
	m —— 也就是makefile，输出make读取makefile，更新makefile，执行makefile的信息。

	“-d”
	相当于“--debug=a”。

	“-e”
	“--environment-overrides”
	指明环境变量的值覆盖makefile中定义的变量的值。

	“-f=<file>”
	“--file=<file>”
	“--makefile=<file>”
	指定需要执行的makefile。

	“-h”
	“--help”
	显示帮助信息。

	“-i”
	“--ignore-errors”
	在执行时忽略所有的错误。

	“-I <dir>”
	“--include-dir=<dir>”
	指定一个被包含makefile的搜索目标。可以使用多个“-I”参数来指定多个目录。

	“-j [<jobsnum>]”
	“--jobs[=<jobsnum>]”
	指同时运行命令的个数。如果没有这个参数，make运行命令时能运行多少就运行多少。如果有一个以上的“-j”参数，那么仅最后一个“-j”才是有效的。（注意这个参数在MS-DOS中是无用的）

	“-k”
	“--keep-going”
	出错也不停止运行。如果生成一个目标失败了，那么依赖于其上的目标就不会被执行了。

	“-l <load>”
	“--load-average[=<load]”
	“—max-load[=<load>]”
	指定make运行命令的负载。

	“-n”
	“--just-print”
	“--dry-run”
	“--recon”
	仅输出执行过程中的命令序列，但并不执行。

	“-o <file>”
	“--old-file=<file>”
	“--assume-old=<file>”
	不重新生成的指定的<file>，即使这个目标的依赖文件新于它。

	“-p”
	“--print-data-base”
	输出makefile中的所有数据，包括所有的规则和变量。这个参数会让一个简单的makefile都会输出一堆信息。如果你只是想输出信息而不想执行 makefile，你可以使用“make -q
	p”命令。如果你想查看执行makefile前的预设变量和规则，你可以使用“make –p –f /dev/null”。这个参数输出的信息会包含着你的makefile文件的文件名和行号，所以，用
	这个参数来调试你的makefile会是很有用的，特别是当你的环境变量很复杂的时候。

	“-q”
	“--question”
	不运行命令，也不输出。仅仅是检查所指定的目标是否需要更新。如果是0则说明要更新，如果是2则说明有错误发生。

	“-r”
	“--no-builtin-rules”
	禁止make使用任何隐含规则。

	“-R”
	“--no-builtin-variabes”
	禁止make使用任何作用于变量上的隐含规则。

	“-s”
	“--silent”
	“--quiet”
	在命令运行时不输出命令的输出。

	“-S”
	“--no-keep-going”
	“--stop”
	取消“-k”选项的作用。因为有些时候，make的选项是从环境变量“MAKEFLAGS”中继承下来的。所以你可以在命令行中使用这个参数来让环境变量中的“-k”选项失效。

	“-t”
	“--touch”
	相当于UNIX的touch命令，只是把目标的修改日期变成最新的，也就是阻止生成目标的命令运行。

	“-v”
	“--version”
	输出make程序的版本、版权等关于make的信息。

	“-w”
	“--print-directory”
	输出运行makefile之前和之后的信息。这个参数对于跟踪嵌套式调用make时很有用。

	“--no-print-directory”
	禁止“-w”选项。

	“-W <file>”
	“--what-if=<file>”
	“--new-file=<file>”
	“--assume-file=<file>”
	假定目标<file>需要更新，如果和“-n”选项使用，那么这个参数会输出该目标更新时的运行动作。如果没有“-n”那么就像运行UNIX的“touch”命令一样，使得<file>的修改时
	间为当前时间。

	“--warn-undefined-variables”
	只要make发现有未定义的变量，那么就输出警告信息