thrift接口描述文件(interface description file)
thrift编译
thrift --gen 开发语言	thrift接口描述文件  例:thrift --gen cpp compare.thrift 将会生成gen-cpp文件夹
	和数据类型有关的内容，会命名为${thrift_file_name}_types.h/${thrift_file_name}_types.cpp
	和常量有关的内容，会命名为${thrift_file_name}_constants.h/${thrift_file_name}_constants.cpp
	针对每一个service会产生一套对应的文件，命名为${service_name}.cpp/${service_name}.h/${service_name}_server.skeleton.cpp
编译thrift生成的文件时,要-lthrift

第1步： 明确要交互的数据格式（如上例中的UserGradeInfo）和具体的方法（如上例中的Search），定义出thrift接口描述文件（英文叫做Inteface Description File）；
第2步： 调用thrift工具，依据thrift接口文件，生成RPC代码
第3步： 你的服务器端程序引用thrift生成的RPC代码，并实现其中的Search动作的逻辑，然后启动监听，等待客户端发来请求
第4步： 客户端同样引入并调用RPC代码来与服务器端通信

基础类型
	bool:	布尔类型(true或false)
	byte:	8位有符号整数
	i16:	16位有符号整数
	i32:	32位有符号整数
	i64:	64位有符号整数
	double:	64位浮点数
	string:	文本字符串,使用UTF-8编码
	
容器
	list:	元素可重复的有序列表,会被转换成c++中的vector,java中的HashSet,Python中的Set等
	set:	元素不可重复的无序集合,会转换成c++中的set,java中的HashSet,Python中的Set等
	map:	一个含有多个key:value键值对的结构,会转换成c++中的map,java中的HashMap,PHP中的关联数组,Python/Ruby中的dictionary等,map的key必须是基础类型,因为有些语言并不支持map的key类型为复杂类型
	
结构体,thrift接口文件中的结构体都会被转换成一个独立的类(class),类的属性是结构体各个类型,类的方法是对这些类型进行处理的相关函数
	例:
		struct UserGradeInfo
		{
			1: required string UserName="Anonymous";
			2: required i16 UserGrade=0;
		}
	结构体中每一个域都有一个正整数标识符,并不要求连续,一旦定义,不建议修改
	每一个域都会有required或optional的限定,required表示必填域,optional表示可选域,可以有默认值,像上面的"Anonymous"和0
	
类型之异常
	除了使用exception来替代struct之外,"异常"这个类型在语法上和上面介绍过的结构体的用法完全一致,但是从语义上讲,exception是在远和调用发生异常时用来抛出异常使用的

类型之服务
	使用关键字service来定义,与面向对象中定义一个接口很类似,返回值为void的函数,可以在函数名前加上oneway标识符,将此函数以异步模式执行,这样在调用此函数后,函数会立即返回,oneway只能修饰返回类型为void的
	对于返回void的函数,thrift仍然会确保函数返回,这样就表示这个函数已被正确执行,且服务器端已有返回的信息,但是如果加上oneway,此函数的返回只能表示数据已经进入传输层,并不能表示服务器端已经收到并返回了数据
	服务可以使用extends来继承另一个服务
	service Calculator extends shared.SharedService
	{
		void ping(),
		i32 add(1:i32 num1,2:i32 num2),						//需要使用数字对参数进行标号
		i32 calculate(1:i32 logid,2:i32 w) throws (1:InvalidOperation ouch),
		oneway void zip()
	}
	
thrift为服务端提供了5种工作模式:TSimpleServer、TNonblockingServer、THsHaServer、TThreadPoolServer、TThreadedSelectorServer
	TSimpleServer
		只有一个工作线程，循环监听新请求的到来并完成对请求的处理，它只是在简单的演示时候使用,TSimpleServer的工作模式采用最简单的阻塞IO，实现方法简洁明了，便于理解，但是一次只能接收和处理一个socket连接，效率比较低，主要用于演示Thrift的工作过程，在实际开发过程中很少用到它
	TNonblockingServer
		该模式也是单线程工作，但是该模式采用NIO的方式，所有的socket都被注册到selector中，在一个线程中通过seletor循环监控所有的socket，每次selector结束时，处理所有的处于就绪状态的socket，对于有数据到来的socket进行数据读取操作，对于有数据发送的socket则进行数据发送，对于监听socket则产生一个新业务socket并将其注册到selector中
		相比于TSimpleServer效率提升主要体现在IO多路复用上，TNonblockingServer采用非阻塞IO，同时监控多个socket的状态变化；
		TNonblockingServer模式在业务处理上还是采用单线程顺序来完成，在业务处理比较复杂、耗时的时候，例如某些接口函数需要读取数据库执行时间较长，此时该模式效率也不高，因为多个调用请求任务依然是顺序一个接一个执行
	THsHaServer模式（半同步半异步）
		是TNonblockingServer类的子类，在5.2节中的TNonblockingServer模式中，采用一个线程来完成对所有socket的监听和业务处理，造成了效率的低下，THsHaServer模式的引入则是部分解决了这些问题。THsHaServer模式中，引入一个线程池来专门进行业务处理
		与TNonblockingServer模式相比，THsHaServer在完成数据读取之后，将业务处理过程交由一个线程池来完成，主线程直接返回进行下一次循环操作，效率大大提升；
		主线程需要完成对所有socket的监听以及数据读写的工作，当并发请求数较大时，且发送数据量较多时，监听socket上新连接请求不能被及时接受。
	TThreadPoolServer
		TThreadPoolServer模式采用阻塞socket方式工作，,主线程负责阻塞式监听“监听socket”中是否有新socket到来，业务处理交由一个线程池来处理
		线程池模式中，数据读取和业务处理都交由线程池完成，主线程只负责监听新连接，因此在并发量较大时新连接也能够被及时接受。线程池模式比较适合服务器端能预知最多有多少个客户端并发的情况，这时每个请求都能被业务线程池及时处理，性能也非常高
		线程池模式的处理能力受限于线程池的工作能力，当并发请求数大于线程池中的线程数时，新请求也只能排队等待
	TThreadedSelectorServer
		TThreadedSelectorServer模式是目前Thrift提供的最高级的模式，它内部有如果几个部分构成:
			（1）  一个AcceptThread线程对象，专门用于处理监听socket上的新连接；

			（2）  若干个SelectorThread对象专门用于处理业务socket的网络I/O操作，所有网络数据的读写均是有这些线程来完成；
			
			（3）  一个负载均衡器SelectorThreadLoadBalancer对象，主要用于AcceptThread线程接收到一个新socket连接请求时，决定将这个新连接请求分配给哪个SelectorThread线程。
			
			（4）  一个ExecutorService类型的工作线程池，在SelectorThread线程中，监听到有业务socket中有调用请求过来，则将请求读取之后，交个ExecutorService线程池中的线程完成此次调用的具体执行；
	
引用其他thrift文件
	include "name.thrift"

可用typedef给类型起别名
	typedef i32 MyInteger

避免名字冲突
	namespace cpp tutorial	(cpp中的namespace空间,cpp可以是java,php,perl,go等)
	
支持常量定义
	const i32 MY_NUM=9853
	
定义枚举
	enum Operation
	{
		ADD=1,
		SUBTRACT=2
		MULTIPLY=3,
		DIVIDE=4
	}
	