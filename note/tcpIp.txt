互联网地址
A类		0网络号(7位)主机号(24位)			0~127		0.0.0.0~127.255.255.255			127网络号是为环回接口预留的,根据惯例,大多数系统把127.0.0.1分配给这个接口
B类		10网络号(14位)主机号(16位)			128~191		128.0.0.0~191.255.255.255
C类		110网络号(21位)主机号(8位)			192~223		192.0.0.0~223.255.255.255
D类		1110多播组号(28位)					224~239		224.0.0.0~239.255.255.255
E类		11110留待后用(27位)					240~247		240.0.0.0~247.255.255.255

子网寻址:现在所有的主机都要求支持子网寻址,不是把一个IP地址看成由单纯的一个网络号和一个主机号组成,而是把主机号再分成一个子网号和一个主机号
子网掩码:是一个32bit的值,其中值为1的bit留给网络号和子网号,为0的比特留给主机号

指向网络的广播地址:主机地址全为1的是广播地址,路由器必须转发指向网络的广播,但它也必须有一个不进行转发的选择
指向子网的广播地址:主机地址全为1且有特定的子网号地址
指向所有子网的广播地址:子网号和主机地址全为1,如果网络没有划分子网,那么这就是一个指向网络的广播地址
受限的广播地址是255.255.255.255,该地址用于主机配置过程中IP数据报的目的地址,此时,主机可能还不知道它所在的网络的网络掩码,甚至连自己的IP地址也不知道,在任何情况下,路由器都不转发目的地址为受限的广播地址的数据报
网络地址:主机地址全为0的是网络地址
广播和多播仅用于UDP
能够接收发往一个特定多播组地址数据的主机集合称为主机组,一个主机组可跨越多个网络,一些多播组地址被IANA确定为知名地址,例:
224.0.0.1		该子网内的所有系统组
224.0.0.2		该子网内的所有路由器组
224.0.1.1		用作网络时间协议NTP
224.0.0.9		用作RIP-2
224.0.1.2		用作SGI公司的dogfight应用
IP地址中的多播组号共有28位,在与以太网多播地址映射时,会将多播组号的低23位映射到以太网地址的低23位,因此每个以太网多播地址对应的多播组不是唯一的,32个不同的多播组号被映射为一个以太网多播地址
既然多播不是唯一的,那么驱动程序或者IP层必须对数据报进行过滤

按目标个数来分,ip地址可分为三类
单播地址	目的地为单个主机
广播地址	目的端为给定网络上的所有主机
多播地址	目的端为同一组内的所有主机

一个以太网帧的物理特性是其长度必须在46~1500字节之间

任何TCP/IP实现所提供的服务都用知名的1~1023之间的端口号,这些知名端口号由Internet分配机构来管理

当应用程序用TCP传送数据时,数据被送入协议栈,然后逐个通过每一层直到被当作一串比特流送入网络,这个过程称为封装
当目的主机收到一个以太网数据帧时,数据就由协议栈中由底向上升,同时去年各层协议加上的报文首部,每层协议合都要去检查报文首部的协议标识,以确定接收数据的上层协议,这个过程称为分用

TCP/IP通常被认为是一个四层协议系统
应用层(Telnet,FTP和e-mail等)
	负责处理特定的应用程序细节,几乎各种不同的TCP/IP实现都会提供下面这些通用的应该程序
	Telnet远程登录
	FTP文件传输协议
	SMTP简单邮件传送协议
	SNMP简单网络管理协议
传输层(TCP和UDP)
	主要为两台主机上的应用程序提供端到端的通信,在TCP/IP协议族中,有两个互不相同的传输协议,TCP(传输控制协议)和UDP(用户数据报协议)
	TCP为两台主机提供高可靠性的数据通信,它所做的工作包括把应用程序交给它的数据分成合适的小块交给下面的网络层,确认接收到的分组,设置发送最后确认分组的超时时钟等,由于传输层提供了高可靠性的端到端的通信,因此应用层可以忽略所有这些细节
	UDP为应用层提供了一种非常简单的服务,它只是把称作数据报的分组从一台主机发送到另一台主机,但并不保证该数据能到达另一端,任何必须的可靠性必须由应用层来保证
网络层(IP,ICMP和IGMP)
	处理分组在网络中的活动,例如分组的选路,在TCP/IP协议族中,网络层协议包括IP协议(网际协议),ICMP协议(Internet互联网控制报文协议),以及IGMP协议(Internet组管理协议),网络层提供点到点的服务
	网络层IP提供的是一种不可靠的服务,它只是尽可能快地的把分组从源节点送到目的节点,并不提供任何可靠性保证,而另一方面,TCP在不可靠的IP层上提供了一个可靠的运输层,为了提供这种可靠性服务,TCP采用了超时重传,发送和接收端到端的确认分组等机制
链路层(设备驱动程序及接口卡)
	通常包括操作系统中的设备驱动程序和计算机中对应的网络接口卡,它们一起处理与电缆(或其他任何传输媒介)的物理接口细节
	
构造互联网最简单的方法是把两个或多个网络通过通过路由器进行连接,路由器的好处是为不同类型的物理网络提供连接:以太网,令牌环网,点对点的链接和FDDI(光纤分布式数据接口)等等
从历史来说,路由器被称作网关,现在网关这个术语只用来表示应用层网关:一个连接两种不同协议族的进程(例如,TCP/IP和IBM的SNA),它为某个特定的应用程序服务(常常是电子邮件或文件传输)
连接互联网的另一个方法是使用网桥,网桥是在链路层上来连接网络,路由器是在网络层上连接

ping和traceroute都使用了ICMP协议
IGMP组管理协议,是用来把一个UDP数据报多播到多个主机

ping:这个名字源于声纳定位操作,目的是为了测试另一台主机是否可达,该程序发送一份ICMP回显请求报文给主机,并等待返回ICMP回显应答
	-R	打印中间的路由信息,由于IP首部长度限制,所以一个包最多存放9个IP地址,记录的是路由出口IP地址,当原始主机收到带有PR选项的ICMP回显应答时,它也要把它的入口地址放入清单中
	
traceroute:尽管不能保证从源端发往目的端的两份连续的IP数据报具有相同的路由,但是大多数情况下是这样,不仅可以看到所经过的路由,还可以使用IP源路由选项
	相对于ping所使用的RR选项,traceroute并不要求所有的路由器都支持这个选项
	原理:
		第一次发送一份TTL为1的IP数据报给目的主机,当处理这份报文的第一个路由器将TTL减1,丢弃该数据报,并发回一份超时ICMP报文,这样就得到了该路径上的第一个路由器的地址,然后,发送TTL为2,3...的报文
		traceRoute怎么判断报文已经到达目的主机,它发送一个UDP数据报给目的主机上的一个不可能的值作为端口的主机(大于30000),traceRoute所要做的就是区分接收到的ICMP是超时还是端口不可达错误
	traceroute将其发送的源端口号设置为其进程号按位或32768,对于在同一主机上运行的多个traceroute,只处理对自己发送应答的报文
	和ping不一样,traceroute记录的是路由进口的ip,所以从B主机到A主机和从A主机到B主机运行traceroute的结果可能是不同的
	使用traceroute的-g选项,可以为宽松的源站选路指明一些中间路由器,采用该选项最多可以指定8个中间路由器(其个数是8而不是9的原因是,所使用的编程接口要求最后的表目是目的主机)
	使用traceroute的-G选项,可以为严格的源站选中指明中间路由器

在TCP/IP协议族中,链路层主要有三个目的
为IP模块发送和接收IP数据报
为ARP模块发送ARP请求和接收ARP应答
为RARP模块发送RARP请求和接收RARP应答

以太网和802.3对数据帧的长度都有一个限制,其最大值分别是1500和1492字节,链路层的这个特性称为MTU(最大传输单元),如果IP层有一个数据报要传,而且数据报的长度比MTU还大,那么IP层就要进行分片
多个网络的MTU值可能每个链路层都不一样,其中最小的那个MTU被称为路径MTU
两台主机之间的MTU不一定是一个常数,它取决于当时所选择的路由,而选路不一定是对称的(从A到B和B到A的路由不同),因此路径MTU在两个方向上不一定是一致的

SLIP:串行线路IP(serial Line IP)
	是一种在串行线路上对IP数据报进行简单封装的简单协议
	IP数据报以一个称作 E N D（0 x c 0）的特殊字符结束。同时，为了防止数据报到来之前的线路噪声被当成数据报内容，大多数实现在数据报的开始处也传一个 E N D字符（如果有线路噪声，那么 E N D字符将结束这份错误的报文。这样当前的报文得以正确地传输，而前一个错误报文交给上层后，会发现其内容毫无意义而被丢弃）。
	如果 I P报文中某个字符为 E N D，那么就要连续传输两个字节 0 x d b和0 x d c来取代它。0 x d b这个特殊字符被称作 S L I P的E S C字符，但是它的值与 A S C I I码的E S C字符（0 x 1 b）不同。
	如果I P报文中某个字符为 S L I P的E S C字符，那么就要连续传输两个字节 0 x d b和0 x d d来取代它。
	缺陷:
		每一端必须知道对方的IP地址,没有办法把本端的IP地址通知给另一端
		数据帧中没有类型字段(类似以太网的类型字段),如果另一条串行线路使用SLIP,那么它不能同时使用其它协议
		SLIP没有在数据帧中加上校验和(类似以太网的CRC字段),如果SLIP传输的报文线路被线路噪声影响而发生错误,只能通过上层协议来发现(新型的调制解调器可以检测并纠正错误报文),这样,上层协议提供某种形式的CRC就很重要
		
CSLIP:压缩的SLIP
	由于串行线路的速率通常较低,而有些交互式的软件经常为了发一个字节而加入20个字节的IP首部和20个字节的TCP首部,如telnet,于是提出了CSLIP,它可以将前面的40个字节压缩到3或5个字节,大大缩短了交互时间
	
PPP:点对点协议,修改了SLIP中所有缺陷
	在串行链路上封装IP数据报的方法,既支持数据为8位和无奇偶检验的异步模式,还支持面向比特的同步链接
	建立,配置及测试数据链路的链路控制协议(LCP:Link Control Protocol),它允许通信双方进行协商,以确定不同的选项
	针对不同网络层协议的网络控制协议(NCP:Network Control Protocol)体系,当前RFC定义的网络层有IP,OSI网络层,DECnet以及AppleTalk
	相比于SLIP的优点:
		PPP支持在单根串行线路上运行多种协议,不只是IP协议
		每一帧都有循环冗余检验
		通信双方可以进行IP地址的协商(使用IP网络控制协议)
		与CSLIP类似,对TCP和IP报文首部进行压缩
		链路控制协议可以对多个数据
	为这些优点付出的代价是在每一帧的首部增加3个字节,当建立链路时要发送几帧协商数据,以及更为复杂的实现
	
IP:网际协议,提供不可靠,无连接的数据报传送服务
	IP层会根据协议字段将数据报发送给TCP或UDP,因此,TCP或UDP的端口是相互独立的(例如某种知名服务的TCP端口和UDP端口是一致的)
	不可靠:它不能保证IP数据报能成功的到达目的地,IP仅提供最好的传输服务,如果发生某个错误,例某个路由器暂时用完了缓冲区,IP有一个简单的错误处理算法,丢弃该数据报,然后发送ICMP消息给信源端,任何要求的可靠性必须由上层来提供
	无连接:IP并不维护任何关于后续数据报的状态信息,每个数据报的处理都是独立的,这也说明,IP数据报可以不按发送顺序接收
	包格式:
		4位版本+4位首部长度+8位服务类型(TOS)+16位总长度(字节数)+
		16位标识+3位标志+13位片偏移+
		8位生存时间(TTL)+8位协议+16位首部检验和(只覆盖IP首部)+
		32位源IP地址+
		32位目标IP地址+
		选项(如果有)+
		数据
	4个字节的32bit值以下面的次序传输:首先是0-7bit,其次8-15bit,然后16-23bit,最后是24-31bit,这种传输次序称作big endian字节序,TCP/IP要求首部中的字节按此顺序传输,因此被称为网络字节序
	16位标识,用于标识每个IP数据报,在分片时将此值复制到每个片中,在分片时,除最后一片外,其他每一片中的数据部分(除IP首部外的其余部分)必须是8字节的整数倍,分片后,传输层的首部只出现在第一片
	3位标志,可用于分片,用其中一个比特来表示"更多的片",除了最后一片外,其他片要将此值置为1,其他还有一个比特称作"不分片"位,如果将这1bit置为1,IP将不对数据报进行分片,相反把数据报丢弃并发送一个ICMP差错报文(需要进行分片但设置了不分片比特)
	13位片偏移,指的是该片偏移原始数据报开始处的位置
	服务类型TOS包括一个3bit的优先权子字段(现在已被忽略),4bit的TOS分别代表:最小时延,最大吞吐量,最高可靠性和最小费用,4bit只能置其中1bit,如果4bit全为0,意味着是一般服务
	TTL(time to live)设置了数据报可以经过的最多路由器数,TTL的初始值由源主机设置(通常为32或64),一旦经过一个处理它的路由器,值减1,当为0时,数据报会被丢弃,并发送ICMP报文通知源主机
	8bit(协议域,1表示ICMP协议,2表示IGMP协议,6表示TCP协议,17表示UDP协议)	
	ICMP,IGMP,UDP和TCP都采用相同的检验和算法
	选项是个可变长的可选信息:
		安全和处理限制(用于军事领域)
		记录路径(让每个路由器都记下它的IP地址)
		时间戳(让每个路由器都记下它的IP地址和时间)
		宽松的源站选路(为数据报指定一系列必须经过的IP地址)
		严格的源站选路(与宽松的源站选路类似,但是要求只能经过指定的这些地址,不能经过其他地址)
	这些选项很少被使用,并非所有的主机和路由器都支持这些选项
	
	IP路由选择:
		如果目的主机与源主机直接相连(如点对点链路)或都在一个共享网络上(以太网或令牌环网),那么IP数据报就直接送到目的主机上,否则,主机把数据报发往一默认的路由器上,由路由器来转发该数据报
		IP可以从TCP,UDP,ICMP,IGMP接收数据(即在本地生成的数据报),或者从一个网络接口接收数据报(待转发的数据报)并进行发送
		IP层在内存中有一个路由表,当收到一份数据并进行发送时,它都要对该表搜索一次,当数据报来自某个网络接口时,IP首先检查目的地IP地址是否为本机的IP地址之一或者IP广播地址,如果确实是这样,数据报就被送到由IP首部协议字段所指定的协议模块进行处理
		如果数据报的目的地址不是这些地址,那么,如果IP层被设为路由器的功能,那么就对该数据报进行转发,否则数据报被丢弃
		主要功能:
			1.搜索路由表,寻找能与目的IP地址完全匹配的表目(网络号与主机号都要匹配),如果找到,则把报文发送给下一站路由器或直接连接的网络接口(取决于标志字段的值)
			2.搜索路由表,寻找能与目的网络号相匹配的表目,如果找到,则把报文发送给下一站路由器或直接连接的网络接口(取决于标志字段的值),目的网络上的所有主机都可以通过这个表目来处置,例如,一个网络上的所有主机都是通过这种表目进行寻径的
			3.搜索路由表,寻找默认的表目,如果找到,则把表目发送给该表目指定的下一站路由器
			如果上面这些步骤都没有成功,那么该数据报就不能被传送	
	IP源站路由选项:
		通常IP路由是动态的,即每个路由器都要判断数据报下面该转发到哪个路由器,应用程序不对此进行控制,而且通常也不关心路由
		源站选路的思想是由发送者指定路由,它可以采用下面两种形式
		严格的源路由选择,发送端指明IP数据报必须采用的路由,如果路由器发现源路由所指定的下一个路由器不在其直接连接的网络上,那么它就返回一个"源站路由失败"的ICMP差错报文
		宽松的源站选路,发送端指明一个数据报必须经过的IP地址清单,但是数据报在清单上指明的任意两个地址之间可能通过其他路由器
			
ARP:地址解析协议
	当一台主机把以太网数据帧发送到位于同一局域网上的另一台主机时,是根据48bit的以太网地址来确定目的接口的,设备驱动程序从不检查IP数据报中的目的IP地址
	地址解析协议为这两种不同的地址形式提供映射,ARP为IP地址到对应的硬件地址提供动态映射,之所以用动态这个词是因为这个过程是自动完成的,一般不必关心,RARP是被那些没有磁盘驱动器的系统使用(一般是无盘工作站或X终端),需要系统管理员进行手动设置
	ARP发送一份称作ARP请求的以太网数据帧给以太网的每台主机,这个过程称作广播,ARP请求的数据帧中包含目的主机的IP地址,其意思是"如果你是这个IP的拥有者,请回答你的硬件地址"
	点对点链路不使用ARP,当设置这些链路时(一般在引导过程中进行),必须告知内核链路每一端的IP地址,像以太网这样的硬件地址并不涉及
	ARP高效运行的基础是每个主机上都有一个ARP高速缓存,这个高速缓存存放了最近Internet地址到硬件地址之间的映射记录,每一项的生存时间为20分钟
	ARP分组格式:
		6字节以太网目的地址+6字节以太网源地址+2字节帧类型+2字节硬件类型+2字节协议类型+1字节硬件地址长度+1字节协议地址长度+2字节op+6字节发送端以太网地址+4字节发送端IP地址+6字节目的以太网地址+4字节目的IP地址
		目的地址全为1的是广播地址
		帧类型表示后面数据的类型,对于ARP请求或应答来说,该字段的值为0x0806
		硬件类型表示硬件地址的类型,它的值为1表示以太网地址
		协议类型表示要映射的协议地址类型,它的值为0x0800即表示IP地址
		硬件地址长度和协议地址长度分别指出硬件地址和协议地址的长度,对于以太网请求或应答来说,它的值分别为6和4
		操作字段指出4种操作类型,它们是ARP请求(值为1),ARP应答(值为2),RARP请求(值为3),RARP应答(值为4)
	如果ARP请求是从一个网络的主机发往另一个网络上的主机,那么连接这两个网络的路由器就可以回答该请求,这个过程称作委托ARP或ARP代理,这样可以欺骗发起ARP请求的发送端,使它误以为路由器就是目的主机
	免费ARP:
		指主机发送ARP查询自己的IP地址,通常,它发生在系统引导期间进行接口配置的时候
		1个主机可以通过它来确定另一个主机是否设置了相同的IP地址
		如果发送免费ARP的主机正好改变了硬件地址(很可能是主机关机了,然后换了张接口卡),那么这个免费ARP就可以使其它主机高速缓存中旧的硬件地址进行相应的更新
		
RARP:逆地址解析协议
	无盘系统的RARP实现过程是从接口卡上读取唯一的硬件地址,然后发送一份RARP请求(一帧在网络上广播的数据),请求某个主机响应无盘系统的IP地址
	RARP的分组格式与ARP基本一致,它们之间主要的差别是RARP请求或应答的帧类型为0x8035,而且RARP请求的操作代码为3,应答操作代码为4
	对于ARP,RARP请求以广播方式传送,而RARP的应答一般是单播传送的
	
ICMP:Internet控制报文协议
	传递差错报文以及其他需要注意的信息,通常被IP层或更高层协议(TCP或UDP)使用,一些ICMP报文把差错报文返回给用户进程,ICMP报文是在IP数据报内部被传输的
	报文格式:
		8位类型+8位代码+16位检验和+不同类型和代码有不同的内容
	当发送一份ICMP报文时,报文始终包含IP的首部和产生ICMP差错报文的IP数据报的前8个字节
	下面的各种情况都不会导致产生ICMP差错报文
		ICMP差错报文(但是,ICMP查询报文可能会产生ICMP差错报文)
		目的地址是广播地址或多播地址的IP数据报
		作为链路层广播的数据报
		不是IP分片的第一片
		源地址不是单个主机的数据报,这就是说,源地址不能为零地址,环回地址,广播地址或多播地址
	这些规则是为了防止过去允许ICMP差错报文对广播分组响应所带来的广播风暴
	ICMP地址掩码请求用于无盘系统在引导过程中获取自己的子网掩码,系统广播它的ICMP请求
	ICMP时间戳请求允许系统向另一个系统查询当前的时间,返回的建议值是自午夜开始计算的毫秒数
	ICMP报文中的标识符和序列号字段由发送端任意选择设定，这些值在应答中将被返回。这样，发送端就可以把应答与请求进行匹配。
	
RIP:Routing information protocol 选路信息协议
	相邻路由器之间进行通信,以告知对方每个路由器当前所连接的网络,这时就出现了动态选路,路由器上有个进程称为路由守护程序(routing daemon),它运行选路协议,并与其相邻的一些路由器进行通信
	使用RIP的网络中跳数最大为15,限制了使用RIP网络规模的大小,而且RIP没有子网地址的概念
	
OSPF:开放最短路径优先选路协议
	是除了RIP外的另一个内部网关协议,它克服了RIP的所有限制
	OSPF直接使用IP,并不使用UDP或TCP,它是一种链路状态协议,而不是距离向量协议
	
BGP:外部网关协议
	BGP使用TCP作为其传输层协议,两个运行BGP的系统之间建立一条TCP连接,然后交换整个BGP路由表,是一个距离向量协议
	
CIDR:无类型域间选路
	由于B类地址的缺乏,而采用C类地址带来了一个问题,每个C类网络都需要一个路由表项,CIDR解决了Internet路由表膨胀的问题
	CIDR的基本观点是采用一种分配多个IP地址的方式,使其能够将路由表中的许多表项总和成更少的数目,例如果有8个不同的站点是通过同一个Internet服务提供商的同一个连接点接入Internet的,且这8个站点分配的8个不同IP地址可以进行总和,那么,对于这8个站点,只需要单个路由表表项
	要使用这种总和,必须满足以下三种特性:
		为进行选路要对多个IP地址进行总和时,这些IP地址必须具有相同的高位地址比特
		路由表和选路算法必须扩展成根据32bitIP地址和32bit掩码做出选路决策
		必须扩展选路协议使其除了32bit地址之外,还要有32bit掩码
		
UDP:用户数据报协议
	UDP封装成IP数据报的格式如下:
		20字节IP首部+8字节UDP首部+UDP数据
	UDP首部格式:
		16位源端口号+16位目的端口号+16位UDP长度(是包括UDP首部和数据的长度,最小为8)+16位UDP检验和(覆盖UDP首部和UDP数据,UDP检验和是可选的,而TCP检验和是必需的)
		
IGMP:Internet组管理协议
	用于支持主机和路由器进行多播,它让一个物理网络上的所有系统知道主机当前所在的多播组,多播路由器需要知道这些信息以便知道多播数据该向哪些接口转发
	格式:
		20字节IP首部+8字节IGMP报文
	IGMP报文格式
		4bitIGMP版本+4bitIGMP类型(为1说明是多播路由器发出的查询报文,为2说明是主机发出的报告报文)+8bit未用+16bit检验和+32bit组地址(D类IP地址)
		
DNS:域名系统
	是一种用于TCP/IP应用程序的分布式数据库,它提供主机名字和IP地址之间的转换及有关电子邮件的选路信息
	DNS的一个基本特性是使用超高速缓存,即当一个名字服务器收到有关映射的信息(主机名字到IP地址)时,它会将该信息存放在高速缓存中
	格式:
		16bit标识+16bit标志+16bit问题数+16bit资源记录数+16bit授权资源记录数+16bit额外资源记录数+不定长查询问题+不定长回答(资源记录数可变)+不定长授权(资源记录数可变)+不定长额外信息(资源记录数可变)
		标识字段由客户程序设置并由服务器返回结果,客户程序通过它来判断响应与查询是否匹配
		16bit的标志字段被划分为若干子字段
			1bitQR+4bitopcode+1bitAA+1bitTC+1bitRD+1bitRA+3bitzero+4bitrcode
		QR:0表示查询报文,1表示响应报文
		opcode:通常值为0(标准查询),其他值为1(反向查询)和2(服务器状态请求)
		AA:表示"授权回答",该名字服务器是授权于该域的
		TC:表示"可截断的",使用UDP时,它表示应答长度超过512字节时,只返回前512个字节
		RD:表示"期望递归",该比特能在一个查询中设置,并在响应中返回,这个标志告诉服务器必须处理这个查询,也称为一个递归查询,如果该位为0,且被请求的名字服务器没有一个授权回答,它就返回一个能解答该查询的其他名字服务列表,这称为迭代查询
		RA:表示"可用递归",如果名字服务器支持递归查询,则在响应中将该比特置为1
		rcode:是一个返回码字段,通常的值为0(没有差错)和3(名字差错),名字差错只有从一个授权名字服务器上返回,它表示在查询中制定的域名不存在
		
TFTP:简单文件传送协议
	使用的是UDP,一般用于引导无盘系统时,适用于只读存储器,是一种停止等待协议(数据发送方在发送下一个数据块之前需要等待接收对已发送数据的确认)
	
BOOTP:引导程序协议
	使用UDP,且通常需要与TFTP协同工作,它为引导无盘系统获得它的IP地址提供了RARP外的另一种选择
	格式:
		20字节IP首部+8字节UDP首部+300字节BOOTP请求/应答
	300字节请求与应答格式:
		8bit操作码+8bit硬件类型+8bit硬件地址长度+8bit跳数+4字节事务标识+2字节秒数+2字节未使用+4字节客户IP地址+4字节你的IP地址+4字节服务器IP地址+4字节网关IP地址+16字节客户主机硬件地址+64字节服务器主机名+128字节引导文件名+64字节特定厂商信息
		操作码:1表示请求.为2表示应答
		硬件类型:1表示10Mb/s的以太网
		跳数:由客户设置为0,但也能被一个代理服务器设置
		事务标识:由客户设置并由服务返回的32bit整数,客户用它对请求和应答进行匹配,对每个请求,客户应该将该字段设置为一个随机数
		秒数:客户开始进行引导时,将"秒数"设置为一个时间值,服务器能够看到这个值,备用服务器在等待时间超这个值以后才会响应客户的请求,这意味着主服务器没有启动
		客户IP地址:如果客户已经知道自己的IP地址,它将写入这个字段,否则填0
		你的IP地址:对于客户IP地址是0的,服务会将客户的IP地址写入这个字段
		服务器IP地址:服务器填写
		网关IP地址:如果使用了某个代理服务器,则该代理服务器填写此字段
		客户硬件地址:虽然以太网数据帧中也有此字段,但一个进程查看以太网帧是非常困难的
		服务器主机名:始终是一个空值终止串,由服务器填写
		引导文件名:填写用于系统引导的文件名及其所在的路径全名
		特定厂商区域:用于对BOOTP进行不同的扩展
		
TCP:传输控制协议
	格式:
		20字节IP首部+20字节TCP首部+TCP数据
	TCP格式(首部如果不计选项字段,通常是20字节)
		16位源端口号+16位目的端口号+32位序号+32位确认序号+4位首部长度+6位保留+1位URG+1位ACK+1位PSH+1位RST+1位SYN+1位FIN+16位窗口大小+16位检验和+16位紧急指针+不定长选项+不定长数据
		序号用来标识从TCP发送端向TCP接收端发送的数据字节流,它表示在这个报文段中第一个数据字节,TCP用序号对每个字节进行计数,是32位无符号整数,到达2^32-1后又从0开始
		确认序号包含发送端所期望收到的下一个序号,因此,确认序号应当是上次已成功接收到数据字序号加1
		当建立一个新连接时,SYN标志变1
		URG:紧急指针有效,紧急指针是一个正的偏移量,和序号字段中的值相加表示紧急数据的最后一个字节的序号
		ACK:确认序号有效
		PSH:接收方应该尽快将这个报文段交给应用层
		RST:重建连接,用来复位
		SYN:同步序号用来发起一个连接
		FIN:发送端完成发送任务
		窗口大小:为字节数,控制TCP的流量
		最常见的可选字段是最长报文大小,又称为MSS(Maximum Segment Size),指明本端所能接收的最大报文长度,限制了另一端发给本端的数据报长度,只能出现在SYN报文段中
	当建立一个新连接时如下:(每行都是一个报文)
		请求端向服务端发送一个SYN标志变为1,序号字段包含由这个主机选择的该连接的初始序号ISN(Initial Sequence Number),该主机要发送数据的第一个字节序号为ISN加1,因为SYN标志消耗了一个序号
		服务端发回包含服务器的初始序号的SYN报文段作为应答,同时,将确认序号设置为客户端的ISN加1
		客户端将确认序号设置为服务端的ISN加1以对服务端的SYN报文段进行确认
		这三个报文段完成连接的建立,这个过程也称为三次握手,ISN随时间而变化,因此每个连接都具有不同的ISN,RFC 793指出ISN可以看作是一个32bit的计数器,每4ms加1
	当关闭一个连接时如下:(每行都是一个报文)
		建立一个连接需要三次握手,而关闭一个连接需要4次握手,这是由于TCP的半关闭引起的,因为TCP是一个全双工的,因此每个方向必须单独地进行关闭
		客户端向服务端发送一个FIN(主动关闭)
		服务端向客户端返回一个ACK(确认序号加1)
		服务端向客户端发送一个FIN(被动关闭)
		客户端向服务端返回一个ACK
	SOCKET的一些选项
		SO_REUSEADDR	允许一个进程重新使用处于2MSL的端口,但TCP不能允许一个新的连接建立在相同的插口对(源ip+端口,目的ip+端口)上
		SO_LINGER		使用RSH复位包来异常关闭一个TCP连接,不会等待未发送的数据发送完再关闭连接
		TCP_NODELAY		关闭Nagle算法
	MSL(Maximum Segment Lifetime),TCP最大报文段生存时间,执行主动关闭的一方会在收到另一方发送FIN后等待2MSL,因为主动关闭的一方无法确认ACK是否已经发送到另一方,因此等待2MSL,等待另一个发送FIN(超时重传)
	无论何时,一个发往插口的报文段出错错误,TCP都会发出一个复位报文段(即RST报文段),当TCP想连接一个不存在的端口时,对方就会发出一个RST报文了,而不是像UDP一样的ICMP端口不可达报文,收到RST报文的另一端不进行任何响应,收到RST即终止连接
	半打开:如果一方已经关闭或者异常终止连接而另一方却还不知道,称之为半打开,如客户端关机,服务端并不知道
	TCP选项格式:
		选项表结束		kind=0(1字节)
		无操作			kind=1(1字节)
		最大报文长度	kind=2(1字节)+len=4(1字节)+最大报文长度(2字节)
		窗口扩大因子	kind=3(1字节)+len=3(1字节)+移位数(1字节)
		时间戳			kind=8(1字节)+len=10(1字节)+时间戳值(4字节)+时间戳回显应答(4字节)
	TCP如何处理呼入连接请求?
		正等待连接请求的一端有一个固定长度的连接队列,该队列中的连接已被接受(即三次握手已完成),但还没有被应用层所接受,TCP接受一个连接是将其放入这个队列,而应用层接受连接是将其从该队列移出
		应用层应该指明该队列的最大长度,这个值通常称为积压值,它的取值范围是0-5,大多数应用程序设置为5
		如果对于新的连接请求,该TCP监听的端口还有空间,则TCP模块将对它进行确认并完成连接的建立,此时客户端可能会向这个端口发送数据,但连接并没有到达应用层,所以,服务器会将接收到的数据放入缓冲队列
		如果对于新的连接请求,连接队列中已没有空间,TCP将不理会收到的SYN,也不发回任何报文段,客户端的打开可能超时
	TCP在接收到数据时并不马上发送ACK,相反,它推迟发送,以便将ACK与沿该方向发送的数据一起发送,绝大多数实现采用的时延为200ms,也就是说,TCP将以最大200ms时延等待是否有数据发送,并不是在收到数据后等待200ms,而是在一个相对于内核引导时间的200ms计时器,由于收到数据是随机到达的,因此计时器可能在未来1-200ms到达
	Nagle算法:
		要求在一个TCP连接上最多只能有一个未被确认的未完成的小分组(如41字节的数据报,20字节IP首部+20字节TCP首部+1字节数据),在该分组的确认到达之前不能发送其他的小分组,相反,TCP收集这些少量的分组,并在确认到达时以一个分组的方式发出去
	慢启动算法
		通过观察到新分组进入网络的速率应该与另一端返回确认的速率相同而进行工作,慢启动为发送方的TCP增加了一个窗口:拥塞窗口,记为cwnd,当与另一个网络的TCP建立连接时,拥塞窗口被初始化为1个报文段,每收到一个ACK,拥塞窗口就增加一个报文段,发送方取拥塞窗口与通告窗口中的最小值作为发送上限
	拥塞避免算法
		是一种处理丢失分组的方法,有2种分组丢失的指示:发送端超时和接收到重复的确认(当TCP接收端收到乱序的包时,会发送已经成功接收到的数据的ACK,客户端就会收到重复的确认了)
	滑动窗口协议
		窗口左边沿向右边靠近称为窗口合拢,这种现象发生在数据被发送和确认时,因为窗口的左边沿受另一端发送的确认序号控制,因此不可能向左边移动,如果接收到一个指示窗口左边沿向左移动的ACK,则它被认为是一个重复的ACK,并被丢弃
		窗口右边沿向右移动时称为窗口张开,这种现象发生在另一端的接收进程读取已经确认的数据并释放了TCP的缓存
		窗口右边沿向左移动时称为窗口收缩,FRC强烈不建议这么做
		如果左边沿到达右边沿,则称其为一个零窗口,此时发送方不能够发送任何数据
	PSH标志
		通过允许客户端设置PSH标志,客户进程通知TCP在向服务器发送一个报文段时不要因等待额外数据而使已提交的数据在缓存中滞留,类似地,当服务器收到一个设置了PSH标志的报文段时,它需要立即将这些数据递交给服务器进程而不能等待判断是否还有额外的数据到达
		目前大多数API并没有向应用程序提供通知其TCP设置PSH的方法,认为PSH已经过时,一个好的TCP实现能够自行决定何时设置这个标志
	TCP在发送时设置一个定时器,如果当定时器溢出时还没有收到确认,它就重传该数据,重传超时时间RTO(Retransmission TimeOut),往返时间是RTT,在发送时启动定时器,采用TCP滴答计数器来计时,一个时钟滴答500ms,则往返时间只可能是500ms的倍数
	对每个TCP连接,TCP管理4个不同的定时器
		重传定时器使用于当希望收到另一端的确认
		坚持定时器使窗口大小信息保持不断流动,即使另一端关闭了其接收窗口
		保活定时器可检测到一个空闲连接的另一端何时崩溃或重启
		2MSL定时器测量一个连接处于TIME_WAIT的时间
		
我们想象,一旦传输层检测到目的端地址是环回地址时,应该可以省略部分传输层和所有网络的逻辑操作,但是大多数产品还是照样完成传输层和网络层的所有过程
看上去似乎效率不高,但它简化了设计,因为环回接口就可以被看作是网络层下面的另一个链路层
	


