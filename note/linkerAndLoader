链接器和加载器
	任何一个链接器和加载器的基本工作就是将更抽象的名字与更底层的名字绑定起来,好让程序员使用更抽象的名字编写代码
	也就是说,它可以将程序员编写的一个诸如getline的名字绑定到"iosys模块内可执行代码的612字节处"
	
程序加载
	将程序从磁盘(存储介质)拷贝到主内存中准备运行,其他情况下,还包括分配存储空间,设置保护位,或通过虚拟内存将虚拟地址映射到磁盘内存页上
重定位
	编译器和汇编器通常为每个文件创建程序地址从0开始的目标代码,但是几乎没有计算机会允许从地址0加载程序
	如果一个程序由多个子程序组成,那么所有的子程序都必须被加载到互不重叠的地址上
	重定位就是为程序不同部分分配加载地址,调整程序中的数据和代码以反映所分配地址的过程,在很多系统中,重定位不止进行一次
	对于链接器的一种普遍情景是由多个子程序来构建一个程序,并生成一个链接好的起始地址为0的输出程序,各个子程序通过重定位在大程序中确定位置,当这个程序被加载时,系统会选择一个加载地址,而链接好的程序会作为整体被重定位到加载地址
符号解析
	当通过子程序来构建一个程序时,子程序间的相互引用是通过符号进行的
	主程序可能会调用一个名为sqrt的计算平方根函数,并且数学库中定义了sqrt函数,链接器通过标明分配给sqrt的地址在库中来解析这个符号,并通过修改目标代码使得call指令引用该地址
两遍链接
	链接器将一系列的目标文件,库及可能的命令文件作为它的输入,然后将输出的目标文件作为产品结果,此外也可能有诸如加载映射信息或调试器符号文件的副产品
	每个输入文件都包含一系列的段,就是连续存放在输出文件中的代码块或数据块,每个输入文件至少包含一个符号表,一些符号会作为导出符号(即在当前文件中定义并在其他文件中使用),其他符号会作为导入符号(在当前文件中使用但不在当前文件中定义)
	当链接器运行时,它首先会对输入文件进行扫描,得到各个段的大小,并收集所有符号的定义和引用,它会创建一个列出输入文件中定义的所有段的段表和包含所有导出,导入符号的符号表
	利用第一遍扫描得到的数据,链接器可以为符号分配数字地址,决定各个段在输出地址空间中的大小和位置,并确定每一部分在输出文件中的布局
	第二遍扫描会利用第一遍扫描中收集的信息来控制实际的链接过程,它会读取并重定位目标代码,为符号引用替换数字地址,调整代码和数据的内存地址以反映重定位的段地址,并将重定位后的代码写入到输出文件中.通常还会再向输出文件中写入文件头部信息,重定位的段和符号表信息
	